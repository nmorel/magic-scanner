{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","undefined","navigator","mediaDevices","getUserMedia","constraints","webkitGetUserMedia","mozGetUserMedia","Promise","resolve","reject","call","Error","App","videoRef","React","useRef","useEffect","video","audio","then","stream","current","srcObject","src","window","URL","createObjectURL","onloadedmetadata","e","play","react_default","a","createElement","className","ref","style","width","height","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"oIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kJCITC,IAA3BC,UAAUC,eACZD,UAAUC,aAAe,SAMiBF,IAAxCC,UAAUC,aAAaC,eACzBF,UAAUC,aAAaC,aAAe,SAASC,GAG7C,IAAID,EAAeF,UAAUI,oBAAsBJ,UAAUK,gBAI7D,OAAKH,EAKE,IAAII,QAAQ,SAASC,EAASC,GACnCN,EAAaO,KAAKT,UAAWG,EAAaI,EAASC,KAL5CF,QAAQE,OAAO,IAAIE,MAAM,sDAqCvBC,MA3Bf,WAEE,IAAMC,EAAWC,IAAMC,OAAO,MAkB9B,OAjBAD,IAAME,UAAU,WACdf,UAAUC,aAAaC,aAAc,CACnCc,OAAO,EACPC,OAAO,IACNC,KAAM,SAAAC,GACH,cAAeP,EAASQ,QAC1BR,EAASQ,QAAQC,UAAYF,EAG7BP,EAASQ,QAAQE,IAAMC,OAAOC,IAAIC,gBAAgBN,GAEpDP,EAASQ,QAAQM,iBAAmB,SAASC,GAC3Cf,EAASQ,QAAQQ,WAGpB,IAGDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAOE,IAAKrB,EAAUsB,MAAO,CAACC,MAAO,IAAKC,OAAQ,SCxCpCC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB7C,WACrBA,UAAU8C,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.99d9f3ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nif (navigator.mediaDevices === undefined) {\n  navigator.mediaDevices = {};\n}\n\n// Some browsers partially implement mediaDevices. We can't just assign an object\n// with getUserMedia as it would overwrite existing properties.\n// Here, we will just add the getUserMedia property if it's missing.\nif (navigator.mediaDevices.getUserMedia === undefined) {\n  navigator.mediaDevices.getUserMedia = function(constraints) {\n\n    // First get ahold of the legacy getUserMedia, if present\n    var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n    // Some browsers just don't implement it - return a rejected promise with an error\n    // to keep a consistent interface\n    if (!getUserMedia) {\n      return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n    }\n\n    // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n    return new Promise(function(resolve, reject) {\n      getUserMedia.call(navigator, constraints, resolve, reject);\n    });\n  }\n}\n\nfunction App() {\n\n  const videoRef = React.useRef(null)\n  React.useEffect(() => {\n    navigator.mediaDevices.getUserMedia( {\n      video: true,\n      audio: false\n    }).then( stream => {\n      if (\"srcObject\" in videoRef.current) {\n        videoRef.current.srcObject = stream;\n      } else {\n        // Avoid using this in new browsers, as it is going away.\n        videoRef.current.src = window.URL.createObjectURL(stream);\n      }\n      videoRef.current.onloadedmetadata = function(e) {\n        videoRef.current.play();\n      };\n    })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <video ref={videoRef} style={{width: 300, height: 300}} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}